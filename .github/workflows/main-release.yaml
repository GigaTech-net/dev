---
name: main build tagged-release

on:
  workflow_call:
  push:
    tags:
      - v*

permissions:
  actions: read
  checks: read
  contents: write
  deployments: read
  issues: read
  discussions: read
  packages: read
  pages: read
  pull-requests: write
  repository-projects: read
  security-events: read
  statuses: write  

env:
  IMAGE_REPOSITORY: cds
  ECS_SERVICE_NAME: cds-prod-ecs-svc-name
  ECS_CLUSTER_NAME: prometheus-cluster-prod

jobs:
  setup:
    name: Setup
    permissions: read-all
    uses: GigaTech-net/public-reusable-workflows/.github/workflows/rw-setup.yaml@main

  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  lint:
    name: Lint Code Base
    needs: [setup, checkout]
    permissions:
      contents: read
      statuses: write
    uses: GigaTech-net/public-reusable-workflows/.github/workflows/rw-super-linter.yaml@main
    with:
      ### For a DevOps-focused repository. Prevents some code-language linters from running
      ### defaults to false
      ### temporarily set this to bypass ts lint
      devops-only: false
      ### A regex to exclude files from linting
      ### defaults to empty
      filter-regex-exclude: "[src|.github]/**"

  secret-scan:
    name: Secret Scan
    needs: [setup, checkout]
    permissions: read-all
    uses: GigaTech-net/public-reusable-workflows/.github/workflows/rw-secret-scan.yaml@main

  spellcheck:
    name: Spellcheck codebase
    needs: [setup, checkout]
    permissions:
      contents: write
    uses: GigaTech-net/public-reusable-workflows/.github/workflows/rw-spellcheck.yaml@main
        
  dependency-check:
    uses: GigaTech-net/public-reusable-workflows/.github/workflows/rw-dependency-check.yaml@main
    needs: [setup]
    permissions: read-all
    with:
      retentionDays: 7

  report-code-quality-metric:
    name: Report Code Quality Metric
    needs: [lint, secret-scan, spellcheck, dependency-check]
    if: always()
    permissions: read-all
    uses: GigaTech-net/public-reusable-workflows/.github/workflows/rw-metric-quality-gate.yaml@main
    secrets: inherit
    with:
        lintStatus: ${{ needs.lint.result }}
        secretScanStatus: ${{ needs.secret-scan.result }}
        spellcheckStatus: ${{ needs.spellcheck.result }}
        dependencyStatus: ${{ needs.dependency-check.result }}
        sourceId: "ari:cloud:compass:c5f85481-25ba-4ff0-afac-a4bc0082db80:metric-source/0938370a-36b8-4157-8b2d-4cd87e26cf36/4ac547b0-1da9-4889-a3c5-64911f46f3f6"
    
  build-deploy:
    name: Build and deploy
    needs: [setup, spellcheck, lint]
    environment: production
    permissions:
      contents: read
      statuses: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: build docker image
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # shellcheck disable=SC2086
          {
            GA=${{ github.actor }}

            if [ "$GA" == "dependabot[bot]" ]; then
              ECR_REGISTRY="BOT-ACCOUNT.dkr.ecr.BOT-REGION.amazonaws.com"
            else
              ECR_REGISTRY="gigatech"
            fi 
            docker build -t "$ECR_REGISTRY/${{ env.IMAGE_REPOSITORY }}":"$IMAGE_TAG" .
            {
              echo "image=$ECR_REGISTRY/${{ env.IMAGE_REPOSITORY }}:$IMAGE_TAG";
              echo "IMAGE_TAG=$IMAGE_TAG";
              echo "ECR_REGISTRY=$ECR_REGISTRY";
            } >> $GITHUB_OUTPUT
          }

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        if: github.actor != 'dependabot[bot]'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: push docker image
        id: push-image
        if: github.actor != 'dependabot[bot]'
        env:
          ECR_REGISTRY: ${{ steps.build-image.outputs.ECR_REGISTRY }}
          IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
          BRANCH: ${{ needs.setup.outputs.branch}}
          VERSION: ${{ needs.setup.outputs.current-version}}
        run: |
          # shellcheck disable=SC2086
          {
            docker push "$ECR_REGISTRY/${{ env.IMAGE_REPOSITORY }}":"$IMAGE_TAG"
            docker tag "$ECR_REGISTRY/${{ env.IMAGE_REPOSITORY }}":"$IMAGE_TAG" "$ECR_REGISTRY/${{ env.IMAGE_REPOSITORY }}":"$VERSION"
            docker push "$ECR_REGISTRY/${{ env.IMAGE_REPOSITORY }}":"$VERSION"
          }
  
      - name: Trigger successful deployment event to DORA metrics webhook
        if: success()
        run: |
          # shellcheck disable=SC2086
          {
            DEPLOYMENT_RESPONSE=$(curl -X POST \
              -H "Authorization: token ${{ secrets.DORA_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{
                "ref": "${{ github.sha }}",
                "environment": "main",
                "required_contexts": [],
                "payload": "{ \"deploymentState\": \"success\" }",
                "description": "Successful deployment from ${{ github.repository }}"
              }' \
              https://api.github.com/repos/${{ github.repository }}/deployments)
            echo "DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq '.id')" >> $GITHUB_ENV
          }

      - name: Trigger failed deployment event to DORA metrics webhook
        if: failure()
        run: |
          # shellcheck disable=SC2086
          {
            DEPLOYMENT_RESPONSE=$(curl -X POST \
              -H "Authorization: token ${{ secrets.DORA_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{
                "ref": "${{ github.sha }}",
                "environment": "main",
                "required_contexts": [],
                "payload": "{ \"deploymentState\": \"failure\" }",
                "description": "Failed deployment from ${{ github.repository }}"
              }' \
              https://api.github.com/repos/${{ github.repository }}/deployments)
            echo "DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq '.id')" >> $GITHUB_ENV
          }
